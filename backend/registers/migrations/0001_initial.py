# Generated by Django 5.2.5 on 2025-09-08 18:04

import django.core.validators
import django.db.models.deletion
import registers.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=registers.models.food_image_upload_path)),
                ('description', models.TextField(blank=True, help_text='Descripcion opcional del usuario', max_length=500)),
                ('ai_description', models.TextField(blank=True, help_text='Descripcion generada por Gemini de la imagen')),
                ('ai_confidence', models.FloatField(help_text='Nivel de confianza del análisis de IA (0.0 - 1.0)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_calories', models.FloatField(help_text='Calorías totales estimadas', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_protein', models.FloatField(help_text='Proteínas totales en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_carbs', models.FloatField(help_text='Carbohidratos totales en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_fat', models.FloatField(help_text='Grasas totales en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_fiber', models.FloatField(default=0, help_text='Fibra total en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_sugar', models.FloatField(default=0, help_text='Azúcares totales en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_sodium', models.FloatField(default=0, help_text='Sodio total en miligramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('estimated_weight', models.FloatField(help_text='Peso estimado del plato en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('gemini_model_used', models.CharField(default='gemini-2.5-flash-lite', help_text='Modelo de Gemini utilizado para el análisis', max_length=50)),
                ('analysis_timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('analyzing', 'Analizando'), ('completed', 'Completado'), ('failed', 'Error en análisis'), ('reviewing', 'En revisión')], default='analyzing', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_registers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registro de Comida',
                'verbose_name_plural': 'Registros de Comida',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del alimento detectado', max_length=200)),
                ('category', models.CharField(help_text='Categoría del alimento (verdura, proteína, carbohidrato, etc.)', max_length=100)),
                ('estimated_quantity', models.FloatField(help_text='Cantidad estimada del alimento', validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_unit', models.CharField(default='gramos', help_text='Unidad de medida (gramos, tazas, piezas, etc.)', max_length=20)),
                ('calories', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('protein', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('carbs', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('fat', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('fiber', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sugar', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sodium', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('confidence', models.FloatField(help_text='Confianza del reconocimiento de este alimento específico', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('food_register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_items', to='registers.foodregister')),
            ],
            options={
                'verbose_name': 'Alimento Individual',
                'verbose_name_plural': 'Alimentos Individuales',
                'ordering': ['-calories'],
            },
        ),
    ]
